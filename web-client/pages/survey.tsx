import { useDispatch, useSelector } from 'react-redux'
import React from 'react'
import { Button, Text, Box, Code, Textarea } from '@chakra-ui/react'
import Head from 'next/head'
import LinkButton from '../components/LinkButton'
import { selectConfigState, setConfigState } from '../store/configSlice'

type AnswerType = 'text' | 'checkbox' | 'radio'

interface Question {
    question: string
    description?: string
    answerType: AnswerType
}

const questions: Question[] = [
    { question: 'With whom are you spending the day?', answerType: 'checkbox' },
    {
        question: 'How do you find the weather today?',
        description:
            "1= bad and I rather stay at home; 2 = it's okey; 3 = good or even amazing",
        answerType: 'checkbox',
    },
    { question: 'How many hours did you sleep today?', answerType: 'text' },
    {
        question: 'How many hours did you spend on work or education?',
        answerType: 'text',
    },
    {
        question:
            'Thinking about recent days, how satisfied are you with the amount of:',
        answerType: 'checkbox',
    },
    {
        question: 'Rate your overall health today',
        answerType: 'checkbox',
    },
    {
        question: 'How would you rate your overall mood today?',
        answerType: 'checkbox',
    },
    {
        question: 'Any other thoughts you want to record?',
        description:
            'If anything that particularly affected your mood happened, you can record it here. Later this information can help you explain certain patterns in your mood curve!',
        answerType: 'text',
    },
]
export default function Survey() {
    const configState = useSelector(selectConfigState)
    const dispatch = useDispatch()

    const [questionIndex, setQuestionIndex] = React.useState(0)

    const nextQuestion = () => {
        if (questionIndex !== questions.length - 1) {
            setQuestionIndex(questionIndex + 1)
        }
    }
    const previousQuestion = () => {
        if (questionIndex !== 0) setQuestionIndex(questionIndex - 1)
    }

    return (
        <Box display="flex" justifyContent="center">
            <Head>
                <title>Survey</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Box
                display="flex"
                flexDirection={'column'}
                alignItems="center"
                justifyContent="space-between"
                minHeight={'600px'}
            >
                <Box
                    display="flex"
                    flexDirection={'column'}
                    alignItems="center"
                    justifyContent="space-between"
                    gap={10}
                    marginTop={10}
                >
                    <LinkButton href="/" text={'Back to home page'} />

                    <Text fontSize="4xl">Survey placeholder</Text>
                    <Text>
                        Question {questionIndex + 1} / {questions.length}
                    </Text>
                    <Box maxWidth={'600px'}>
                        <Text fontSize={'2xl'} fontWeight={'bold'}>
                            {questions[questionIndex].question}
                        </Text>
                        {questions[questionIndex].description && (
                            <Text fontSize={'md'}>
                                {questions[questionIndex].description}
                            </Text>
                        )}
                    </Box>
                    {questions[questionIndex].answerType === 'text' ? (
                        <Textarea />
                    ) : (
                        <Code> Answer Placeholder</Code>
                    )}
                </Box>
                <Box>
                    <Box display={'flex'} gap={5}>
                        <Button
                            disabled={questionIndex === 0}
                            onClick={previousQuestion}
                        >
                            Previous question
                        </Button>

                        {questionIndex === questions.length - 1 ? (
                            <LinkButton
                                onClick={() => dispatch(setConfigState(true))}
                                colorTheme="red"
                                href="/"
                                text="Finish survey"
                            />
                        ) : (
                            <Button
                                disabled={
                                    questionIndex === questions.length - 1
                                }
                                onClick={nextQuestion}
                            >
                                Next question
                            </Button>
                        )}
                    </Box>
                </Box>
            </Box>
        </Box>
    )
}
